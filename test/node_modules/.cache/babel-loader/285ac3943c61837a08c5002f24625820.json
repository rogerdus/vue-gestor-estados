{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  class: \"card\"\n};\nconst _hoisted_3 = {\n  class: \"card-content\"\n};\nconst _hoisted_4 = {\n  class: \"title\"\n};\nconst _hoisted_5 = {\n  class: \"subtitle\"\n};\nconst _hoisted_6 = {\n  class: \"card\"\n};\nconst _hoisted_7 = {\n  class: \"card-content\"\n};\nconst _hoisted_8 = {\n  class: \"menu\"\n};\n\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"menu-label\"\n}, \" Selecciona una respuesta: \", -1\n/* HOISTED */\n);\n\nconst _hoisted_10 = {\n  class: \"menu-list\"\n};\nconst _hoisted_11 = {\n  class: \"radio\"\n};\nconst _hoisted_12 = [\"onChange\"];\nconst _hoisted_13 = {\n  class: \"box\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $data.questionSelected ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"p\", _hoisted_4, _toDisplayString($data.questionSelected.question), 1\n  /* TEXT */\n  ), _createElementVNode(\"p\", _hoisted_5, \" Pregunta: \" + _toDisplayString($data.indexSelected + 1) + \" de \" + _toDisplayString($data.listQuestions.length), 1\n  /* TEXT */\n  )])]), _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" aqui van las alternativas \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"aside\", _hoisted_8, [_hoisted_9, _createElementVNode(\"ul\", _hoisted_10, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.questionSelected.respuestas, answer => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: answer.id\n    }, [_createElementVNode(\"label\", _hoisted_11, [_createElementVNode(\"input\", {\n      type: \"radio\",\n      name: \"answer\",\n      onChange: $event => $options.getValueAlternative(answer)\n    }, null, 40\n    /* PROPS, HYDRATE_EVENTS */\n    , _hoisted_12), _createTextVNode(\" \" + _toDisplayString(answer.tag) + \" \" + _toDisplayString(answer.answer), 1\n    /* TEXT */\n    )])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])])])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n    class: \"button is-success\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.nextQuestion())\n  }, \" Siguiente Pregunta \")])])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"mappings":";;;;;EAESA,KAAK,EAAC;;;EACJA,KAAK,EAAC;;;EACNA,KAAK,EAAC;;;EAGNA,KAAK,EAAC;;;EAMRA,KAAK,EAAC;;;EAEJA,KAAK,EAAC;;;EACFA,KAAK,EAAC;;;gCACXC,oBAEI,GAFJ,EAEI;EAFDD,KAAK,EAAC;AAEL,CAFJ,EAAsB,6BAAtB,EAEA;AAAA;AAFA;;;EAGIA,KAAK,EAAC;;;EAECA,KAAK,EAAC;;;;EAclBA,KAAK,EAAC;;;SAnCFE,wCAAXC,oBAwCM,KAxCN,EAwCMC,UAxCN,EAwCM,CAvCJH,oBASM,KATN,cASM,CARJA,oBAOM,KAPN,cAOM,CANJA,oBAEI,GAFJ,cAEII,iBADCH,uBAAiBI,QAClB,CAFJ,EAC8B;EAAA;EAD9B,CAMI,EAHJL,oBAEI,GAFJ,cAAoB,gBACRI,iBAAGH,sBAAa,CAAhB,CADQ,GACe,MADf,GACmBG,iBAAGH,oBAAcK,MAAjB,CADvC,EAC8D;EAAA;EAD9D,CAGI,CAPN,CAQI,CATN,CAuCI,EA5BJN,oBAqBM,KArBN,cAqBM,CApBJO,kDAoBI,EAnBJP,oBAkBM,KAlBN,cAkBM,CAjBJA,oBAgBQ,OAhBR,cAgBQ,CAfNQ,UAeM,EAZNR,oBAWK,IAXL,eAWK,oBAVHE,oBASKO,SATL,EASK,IATL,EASKC,YATgBT,uBAAiBU,UASjC,EATMC,MAAqC,IAA/B;yBAAjBV,oBASK,IATL,EASK;MAT8CW,GAAG,EAAED,MAAM,CAACE;IAS1D,CATL,GACEd,oBAOQ,OAPR,eAOQ,CANNA,oBAIE,OAJF,EAIE;MAHAe,IAAI,EAAC,OAGL;MAFAC,IAAI,EAAC,QAEL;MADCC,QAAM,YAAEC,6BAAoBN,MAApB;IACT,CAJF;;IAAA,cAMM,mBAFJ,MACFR,iBAAGQ,MAAM,CAACO,GAAV,CADE,GACc,GADd,GACef,iBAAGQ,MAAM,CAACA,MAAV,GAAgB;IAAA;KAC3B,CAPR,EADF;GASK,CATL;;EAAA,CAUG,EAXL,CAYM,CAhBR,CAiBI,CAlBN,CAmBI,CArBN,CA4BI,EALJZ,oBAIM,KAJN,eAIM,CAHJA,oBAES,QAFT,EAES;IAFDD,KAAK,EAAC,mBAEL;IAF0BqB,OAAK,sCAAEF,uBAAF;EAE/B,CAFT,EAA0D,sBAA1D,CAGI,CAJN,CAKI,CAxCN","names":["class","_createElementVNode","$data","_createElementBlock","_hoisted_1","_toDisplayString","question","length","_createCommentVNode","_hoisted_9","_Fragment","_renderList","respuestas","answer","key","id","type","name","onChange","$options","tag","onClick"],"sourceRoot":"","sources":["/var/www/html/pruebas/vue/curso-gestor-estados/neuntest/src/components/examen/Questions.vue"],"sourcesContent":["<template>\n  <div v-if=\"questionSelected\">\n    <div class=\"card\">\n      <div class=\"card-content\">\n        <p class=\"title\">\n          {{ questionSelected.question }}\n        </p>\n        <p class=\"subtitle\">\n          Pregunta: {{ indexSelected + 1 }} de {{ listQuestions.length }}\n        </p>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <!-- aqui van las alternativas -->\n      <div class=\"card-content\">\n        <aside class=\"menu\">\n          <p class=\"menu-label\">\n            Selecciona una respuesta:\n          </p>\n          <ul class=\"menu-list\">\n            <li v-for=\"answer in questionSelected.respuestas\" :key=\"answer.id\">\n              <label class=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"answer\"\n                  @change=\"getValueAlternative(answer)\"\n                />\n                {{ answer.tag }} {{ answer.answer }}\n              </label>\n            </li>\n          </ul>\n        </aside>\n      </div>\n    </div>\n\n    <div class=\"box\">\n      <button class=\"button is-success\" @click=\"nextQuestion()\">\n        Siguiente Pregunta\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\n// api\nimport { apiListQuestions } from \"@/api/Examen.js\";\nimport { mapState, mapActions } from \"vuex\";\n\nexport default {\n  computed: {\n    ...mapState({\n      listaRespuestas: \"listaRespuestas\",\n    }),\n  },\n  data() {\n    return {\n      listQuestions: [],\n      indexSelected: -1,\n      questionSelected: null,\n      answerdSelected: null,\n    };\n  },\n  methods: {\n    ...mapActions({\n      agregarRespuesta: \"agregarRespuesta\",\n    }),\n    loadQuestions: function () {\n      apiListQuestions().then((response) => {\n        this.listQuestions = this.listQuestions.concat(response.data.results);\n        if (this.listQuestions.length > 0) {\n          this.indexSelected = 0;\n          this.questionSelected = this.listQuestions[this.indexSelected];\n        }\n      });\n    },\n    nextQuestion: function () {\n      this.agregarRespuestaSeleccionada()\n      this.indexSelected = this.indexSelected + 1\n      this.questionSelected = this.listQuestions[this.indexSelected]\n    },\n    agregarRespuestaSeleccionada: function () {\n      let respuestaSeleccionada = {\n        alernativa: this.answerdSelected.tag,\n        puntos: this.answerdSelected.is_true ? this.questionSelected.points : 0,\n      };\n      //console.log(\"respuesta Seleccionada\"+ this.answerdSelected);\n      this.agregarRespuesta(respuestaSeleccionada);\n\n      if(this.indexSelected == ( this.listQuestions.length -1 )){\n        this.$router.push({'name': 'resultado'})\n      }\n\n    },\n    getValueAlternative: function (answer) {\n      //console.log(\"seleccionando respuesta \"+answer.tag);\n      this.answerdSelected = answer\n    },\n  },\n  beforeMount() {\n    this.loadQuestions();\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module"}