{"ast":null,"code":"// api\nimport { apiListQuestions } from \"@/api/Examen.js\";\nimport { mapState, mapActions } from \"vuex\";\nexport default {\n  computed: { ...mapState({\n      listaRespuestas: \"listaRespuestas\"\n    })\n  },\n\n  data() {\n    return {\n      listQuestions: [],\n      indexSelected: -1,\n      questionSelected: null,\n      answerdSelected: null\n    };\n  },\n\n  methods: { ...mapActions({\n      agregarRespuesta: \"agregarRespuesta\"\n    }),\n    loadQuestions: function () {\n      apiListQuestions().then(response => {\n        this.listQuestions = this.listQuestions.concat(response.data.results);\n\n        if (this.listQuestions.length > 0) {\n          this.indexSelected = 0;\n          this.questionSelected = this.listQuestions[this.indexSelected];\n        }\n      });\n    },\n    nextQuestion: function () {\n      this.agregarRespuestaSeleccionada();\n      this.indexSelected = this.indexSelected + 1;\n      this.questionSelected = this.listQuestions[this.indexSelected];\n    },\n    agregarRespuestaSeleccionada: function () {\n      let respuestaSeleccionada = {\n        alernativa: this.answerdSelected.tag,\n        puntos: this.answerdSelected.is_true ? this.questionSelected.points : 0\n      };\n      console.log(\"respuesta Seleccionada\" + respuestaSeleccionada);\n      this.agregarRespuesta(respuestaSeleccionada);\n    },\n    getValueAlternative: function (answer) {\n      this.answerdSelected = answer;\n    }\n  },\n\n  beforeMount() {\n    this.loadQuestions();\n  }\n\n};","map":{"version":3,"mappings":"AA6CA;AACA,SAASA,gBAAT,QAAiC,iBAAjC;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,MAArC;AAEA,eAAe;EACbC,QAAQ,EAAE,EACR,GAAGF,QAAQ,CAAC;MACVG,eAAe,EAAE;IADP,CAAD;EADH,CADG;;EAMbC,IAAI,GAAG;IACL,OAAO;MACLC,aAAa,EAAE,EADV;MAELC,aAAa,EAAE,CAAC,CAFX;MAGLC,gBAAgB,EAAE,IAHb;MAILC,eAAe,EAAE;IAJZ,CAAP;EAMD,CAbY;;EAcbC,OAAO,EAAE,EACP,GAAGR,UAAU,CAAC;MACZS,gBAAgB,EAAE;IADN,CAAD,CADN;IAIPC,aAAa,EAAE,YAAY;MACzBZ,gBAAgB,GAAGa,IAAnB,CAAyBC,QAAD,IAAc;QACpC,KAAKR,aAAL,GAAqB,KAAKA,aAAL,CAAmBS,MAAnB,CAA0BD,QAAQ,CAACT,IAAT,CAAcW,OAAxC,CAArB;;QACA,IAAI,KAAKV,aAAL,CAAmBW,MAAnB,GAA4B,CAAhC,EAAmC;UACjC,KAAKV,aAAL,GAAqB,CAArB;UACA,KAAKC,gBAAL,GAAwB,KAAKF,aAAL,CAAmB,KAAKC,aAAxB,CAAxB;QACF;MACD,CAND;IAOD,CAZM;IAaPW,YAAY,EAAE,YAAY;MACxB,KAAKC,4BAAL;MACA,KAAKZ,aAAL,GAAqB,KAAKA,aAAL,GAAqB,CAA1C;MACA,KAAKC,gBAAL,GAAwB,KAAKF,aAAL,CAAmB,KAAKC,aAAxB,CAAxB;IACD,CAjBM;IAkBPY,4BAA4B,EAAE,YAAY;MACxC,IAAIC,qBAAoB,GAAI;QAC1BC,UAAU,EAAE,KAAKZ,eAAL,CAAqBa,GADP;QAE1BC,MAAM,EAAE,KAAKd,eAAL,CAAqBe,OAArB,GAA+B,KAAKhB,gBAAL,CAAsBiB,MAArD,GAA8D;MAF5C,CAA5B;MAIAC,OAAO,CAACC,GAAR,CAAY,2BAA0BP,qBAAtC;MACA,KAAKT,gBAAL,CAAsBS,qBAAtB;IACD,CAzBM;IA0BPQ,mBAAmB,EAAE,UAAUC,MAAV,EAAkB;MACrC,KAAKpB,eAAL,GAAuBoB,MAAvB;IACD;EA5BM,CAdI;;EA4CbC,WAAW,GAAG;IACZ,KAAKlB,aAAL;EACD;;AA9CY,CAAf","names":["apiListQuestions","mapState","mapActions","computed","listaRespuestas","data","listQuestions","indexSelected","questionSelected","answerdSelected","methods","agregarRespuesta","loadQuestions","then","response","concat","results","length","nextQuestion","agregarRespuestaSeleccionada","respuestaSeleccionada","alernativa","tag","puntos","is_true","points","console","log","getValueAlternative","answer","beforeMount"],"sourceRoot":"","sources":["/var/www/html/pruebas/vue/curso-gestor-estados/neuntest/src/components/examen/Questions.vue"],"sourcesContent":["<template>\n  <div v-if=\"questionSelected\">\n    <div class=\"card\">\n      <div class=\"card-content\">\n        <p class=\"title\">\n          {{ questionSelected.question }}\n        </p>\n        <p class=\"subtitle\">\n          Pregunta: {{ indexSelected + 1 }} de {{ listQuestions.length }}\n        </p>\n      </div>\n    </div>\n\n    <div class=\"card\">\n      <!-- aqui van las alternativas -->\n      <div class=\"card-content\">\n        <aside class=\"menu\">\n          <p class=\"menu-label\">\n            Selecciona una respuesta:\n          </p>\n          <ul class=\"menu-list\">\n            <li v-for=\"answer in questionSelected.respuestas\" :key=\"answer.id\">\n              <label class=\"radio\">\n                <input\n                  type=\"radio\"\n                  name=\"answer\"\n                  @change=\"getValueAlternative(answer)\"\n                />\n                {{ answer.tag }} {{ answer.answer }}\n              </label>\n            </li>\n          </ul>\n        </aside>\n      </div>\n    </div>\n\n    <div class=\"box\">\n      <button class=\"button is-success\" @click=\"nextQuestion()\">\n        Siguiente Pregunta\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\n// api\nimport { apiListQuestions } from \"@/api/Examen.js\";\nimport { mapState, mapActions } from \"vuex\";\n\nexport default {\n  computed: {\n    ...mapState({\n      listaRespuestas: \"listaRespuestas\",\n    }),\n  },\n  data() {\n    return {\n      listQuestions: [],\n      indexSelected: -1,\n      questionSelected: null,\n      answerdSelected: null,\n    };\n  },\n  methods: {\n    ...mapActions({\n      agregarRespuesta: \"agregarRespuesta\",\n    }),\n    loadQuestions: function () {\n      apiListQuestions().then((response) => {\n        this.listQuestions = this.listQuestions.concat(response.data.results);\n        if (this.listQuestions.length > 0) {\n          this.indexSelected = 0;\n          this.questionSelected = this.listQuestions[this.indexSelected];\n        }\n      });\n    },\n    nextQuestion: function () {\n      this.agregarRespuestaSeleccionada()\n      this.indexSelected = this.indexSelected + 1\n      this.questionSelected = this.listQuestions[this.indexSelected]\n    },\n    agregarRespuestaSeleccionada: function () {\n      let respuestaSeleccionada = {\n        alernativa: this.answerdSelected.tag,\n        puntos: this.answerdSelected.is_true ? this.questionSelected.points : 0,\n      };\n      console.log(\"respuesta Seleccionada\"+ respuestaSeleccionada);\n      this.agregarRespuesta(respuestaSeleccionada);\n    },\n    getValueAlternative: function (answer) {\n      this.answerdSelected = answer\n    },\n  },\n  beforeMount() {\n    this.loadQuestions();\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n"]},"metadata":{},"sourceType":"module"}